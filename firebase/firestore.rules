rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthed() { return request.auth != null; }
    function isAdmin() {
      // Optional: use custom claims or userProfiles
      return request.auth.token.admin == true;
    }

    match /controls/{controlId} {
      allow read: if isAuthed();

      allow create, update: if isAuthed() &&
        (!('status' in request.resource.data) || request.resource.data.status in ['not_implemented','partially_implemented','fully_implemented']) &&
        request.resource.data.keys().hasAll(['code','title','family']) &&
        request.time > timestamp.date(2020,1,1);

      allow delete: if isAdmin();

      match /comments/{commentId} {
        allow read: if isAuthed();
        allow create: if isAuthed() && request.resource.data.authorUid == request.auth.uid;
        allow update, delete: if isAuthed() && resource.data.authorUid == request.auth.uid || isAdmin();
      }

      match /evidence/{evidenceId} {
        allow read: if isAuthed();
        allow create: if isAuthed() && request.resource.data.uploadedBy == request.auth.uid;
        allow update, delete: if isAuthed() && resource.data.uploadedBy == request.auth.uid || isAdmin();
      }
    }

    match /userProfiles/{uid} {
      allow read: if isAuthed();
      allow write: if isAuthed() && request.auth.uid == uid;
    }
  }
}
